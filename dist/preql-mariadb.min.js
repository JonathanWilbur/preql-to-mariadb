var preqlmariadb=function(e){var a={};function n(r){if(a[r])return a[r].exports;var t=a[r]={i:r,l:!1,exports:{}};return e[r].call(t.exports,t,t.exports,n),t.l=!0,t.exports}return n.m=e,n.c=a,n.d=function(e,a,r){n.o(e,a)||Object.defineProperty(e,a,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,a){if(1&a&&(e=n(e)),8&a)return e;if(4&a&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&a&&"string"!=typeof e)for(var t in e)n.d(r,t,function(a){return e[a]}.bind(null,t));return r},n.n=function(e){var a=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(a,"a",a),a},n.o=function(e,a){return Object.prototype.hasOwnProperty.call(e,a)},n.p="",n(n.s=0)}({"./node_modules/tz-offset/generated/offsets.json":
/*!*******************************************************!*\
  !*** ./node_modules/tz-offset/generated/offsets.json ***!
  \*******************************************************/
/*! exports provided: Africa/Abidjan, Africa/Accra, Africa/Addis_Ababa, Africa/Algiers, Africa/Asmara, Africa/Asmera, Africa/Bamako, Africa/Bangui, Africa/Banjul, Africa/Bissau, Africa/Blantyre, Africa/Brazzaville, Africa/Bujumbura, Africa/Cairo, Africa/Casablanca, Africa/Ceuta, Africa/Conakry, Africa/Dakar, Africa/Dar_es_Salaam, Africa/Djibouti, Africa/Douala, Africa/El_Aaiun, Africa/Freetown, Africa/Gaborone, Africa/Harare, Africa/Johannesburg, Africa/Juba, Africa/Kampala, Africa/Khartoum, Africa/Kigali, Africa/Kinshasa, Africa/Lagos, Africa/Libreville, Africa/Lome, Africa/Luanda, Africa/Lubumbashi, Africa/Lusaka, Africa/Malabo, Africa/Maputo, Africa/Maseru, Africa/Mbabane, Africa/Mogadishu, Africa/Monrovia, Africa/Nairobi, Africa/Ndjamena, Africa/Niamey, Africa/Nouakchott, Africa/Ouagadougou, Africa/Porto-Novo, Africa/Sao_Tome, Africa/Timbuktu, Africa/Tripoli, Africa/Tunis, Africa/Windhoek, America/Adak, America/Anchorage, America/Anguilla, America/Antigua, America/Araguaina, America/Argentina/Buenos_Aires, America/Argentina/Catamarca, America/Argentina/ComodRivadavia, America/Argentina/Cordoba, America/Argentina/Jujuy, America/Argentina/La_Rioja, America/Argentina/Mendoza, America/Argentina/Rio_Gallegos, America/Argentina/Salta, America/Argentina/San_Juan, America/Argentina/San_Luis, America/Argentina/Tucuman, America/Argentina/Ushuaia, America/Aruba, America/Asuncion, America/Atikokan, America/Atka, America/Bahia, America/Bahia_Banderas, America/Barbados, America/Belem, America/Belize, America/Blanc-Sablon, America/Boa_Vista, America/Bogota, America/Boise, America/Buenos_Aires, America/Cambridge_Bay, America/Campo_Grande, America/Cancun, America/Caracas, America/Catamarca, America/Cayenne, America/Cayman, America/Chicago, America/Chihuahua, America/Coral_Harbour, America/Cordoba, America/Costa_Rica, America/Creston, America/Cuiaba, America/Curacao, America/Danmarkshavn, America/Dawson, America/Dawson_Creek, America/Denver, America/Detroit, America/Dominica, America/Edmonton, America/Eirunepe, America/El_Salvador, America/Ensenada, America/Fort_Nelson, America/Fort_Wayne, America/Fortaleza, America/Glace_Bay, America/Godthab, America/Goose_Bay, America/Grand_Turk, America/Grenada, America/Guadeloupe, America/Guatemala, America/Guayaquil, America/Guyana, America/Halifax, America/Havana, America/Hermosillo, America/Indiana/Indianapolis, America/Indiana/Knox, America/Indiana/Marengo, America/Indiana/Petersburg, America/Indiana/Tell_City, America/Indiana/Vevay, America/Indiana/Vincennes, America/Indiana/Winamac, America/Indianapolis, America/Inuvik, America/Iqaluit, America/Jamaica, America/Jujuy, America/Juneau, America/Kentucky/Louisville, America/Kentucky/Monticello, America/Knox_IN, America/Kralendijk, America/La_Paz, America/Lima, America/Los_Angeles, America/Louisville, America/Lower_Princes, America/Maceio, America/Managua, America/Manaus, America/Marigot, America/Martinique, America/Matamoros, America/Mazatlan, America/Mendoza, America/Menominee, America/Merida, America/Metlakatla, America/Mexico_City, America/Miquelon, America/Moncton, America/Monterrey, America/Montevideo, America/Montreal, America/Montserrat, America/Nassau, America/New_York, America/Nipigon, America/Nome, America/Noronha, America/North_Dakota/Beulah, America/North_Dakota/Center, America/North_Dakota/New_Salem, America/Ojinaga, America/Panama, America/Pangnirtung, America/Paramaribo, America/Phoenix, America/Port-au-Prince, America/Port_of_Spain, America/Porto_Acre, America/Porto_Velho, America/Puerto_Rico, America/Punta_Arenas, America/Rainy_River, America/Rankin_Inlet, America/Recife, America/Regina, America/Resolute, America/Rio_Branco, America/Rosario, America/Santa_Isabel, America/Santarem, America/Santiago, America/Santo_Domingo, America/Sao_Paulo, America/Scoresbysund, America/Shiprock, America/Sitka, America/St_Barthelemy, America/St_Johns, America/St_Kitts, America/St_Lucia, America/St_Thomas, America/St_Vincent, America/Swift_Current, America/Tegucigalpa, America/Thule, America/Thunder_Bay, America/Tijuana, America/Toronto, America/Tortola, America/Vancouver, America/Virgin, America/Whitehorse, America/Winnipeg, America/Yakutat, America/Yellowknife, Antarctica/Casey, Antarctica/Davis, Antarctica/DumontDUrville, Antarctica/Macquarie, Antarctica/Mawson, Antarctica/McMurdo, Antarctica/Palmer, Antarctica/Rothera, Antarctica/South_Pole, Antarctica/Syowa, Antarctica/Troll, Antarctica/Vostok, Arctic/Longyearbyen, Asia/Aden, Asia/Almaty, Asia/Amman, Asia/Anadyr, Asia/Aqtau, Asia/Aqtobe, Asia/Ashgabat, Asia/Ashkhabad, Asia/Atyrau, Asia/Baghdad, Asia/Bahrain, Asia/Baku, Asia/Bangkok, Asia/Barnaul, Asia/Beirut, Asia/Bishkek, Asia/Brunei, Asia/Calcutta, Asia/Chita, Asia/Choibalsan, Asia/Chongqing, Asia/Chungking, Asia/Colombo, Asia/Dacca, Asia/Damascus, Asia/Dhaka, Asia/Dili, Asia/Dubai, Asia/Dushanbe, Asia/Famagusta, Asia/Gaza, Asia/Harbin, Asia/Hebron, Asia/Ho_Chi_Minh, Asia/Hong_Kong, Asia/Hovd, Asia/Irkutsk, Asia/Istanbul, Asia/Jakarta, Asia/Jayapura, Asia/Jerusalem, Asia/Kabul, Asia/Kamchatka, Asia/Karachi, Asia/Kashgar, Asia/Kathmandu, Asia/Katmandu, Asia/Khandyga, Asia/Kolkata, Asia/Krasnoyarsk, Asia/Kuala_Lumpur, Asia/Kuching, Asia/Kuwait, Asia/Macao, Asia/Macau, Asia/Magadan, Asia/Makassar, Asia/Manila, Asia/Muscat, Asia/Nicosia, Asia/Novokuznetsk, Asia/Novosibirsk, Asia/Omsk, Asia/Oral, Asia/Phnom_Penh, Asia/Pontianak, Asia/Pyongyang, Asia/Qatar, Asia/Qyzylorda, Asia/Rangoon, Asia/Riyadh, Asia/Saigon, Asia/Sakhalin, Asia/Samarkand, Asia/Seoul, Asia/Shanghai, Asia/Singapore, Asia/Srednekolymsk, Asia/Taipei, Asia/Tashkent, Asia/Tbilisi, Asia/Tehran, Asia/Tel_Aviv, Asia/Thimbu, Asia/Thimphu, Asia/Tokyo, Asia/Tomsk, Asia/Ujung_Pandang, Asia/Ulaanbaatar, Asia/Ulan_Bator, Asia/Urumqi, Asia/Ust-Nera, Asia/Vientiane, Asia/Vladivostok, Asia/Yakutsk, Asia/Yangon, Asia/Yekaterinburg, Asia/Yerevan, Atlantic/Azores, Atlantic/Bermuda, Atlantic/Canary, Atlantic/Cape_Verde, Atlantic/Faeroe, Atlantic/Faroe, Atlantic/Jan_Mayen, Atlantic/Madeira, Atlantic/Reykjavik, Atlantic/South_Georgia, Atlantic/St_Helena, Atlantic/Stanley, Australia/ACT, Australia/Adelaide, Australia/Brisbane, Australia/Broken_Hill, Australia/Canberra, Australia/Currie, Australia/Darwin, Australia/Eucla, Australia/Hobart, Australia/LHI, Australia/Lindeman, Australia/Lord_Howe, Australia/Melbourne, Australia/NSW, Australia/North, Australia/Perth, Australia/Queensland, Australia/South, Australia/Sydney, Australia/Tasmania, Australia/Victoria, Australia/West, Australia/Yancowinna, Brazil/Acre, Brazil/DeNoronha, Brazil/East, Brazil/West, CET, CST6CDT, Canada/Atlantic, Canada/Central, Canada/Eastern, Canada/Mountain, Canada/Newfoundland, Canada/Pacific, Canada/Saskatchewan, Canada/Yukon, Chile/Continental, Chile/EasterIsland, Cuba, EET, EST, EST5EDT, Egypt, Eire, Etc/GMT, Etc/GMT+0, Etc/GMT+1, Etc/GMT+10, Etc/GMT+11, Etc/GMT+12, Etc/GMT+2, Etc/GMT+3, Etc/GMT+4, Etc/GMT+5, Etc/GMT+6, Etc/GMT+7, Etc/GMT+8, Etc/GMT+9, Etc/GMT-0, Etc/GMT-1, Etc/GMT-10, Etc/GMT-11, Etc/GMT-12, Etc/GMT-13, Etc/GMT-14, Etc/GMT-2, Etc/GMT-3, Etc/GMT-4, Etc/GMT-5, Etc/GMT-6, Etc/GMT-7, Etc/GMT-8, Etc/GMT-9, Etc/GMT0, Etc/Greenwich, Etc/UCT, Etc/UTC, Etc/Universal, Etc/Zulu, Europe/Amsterdam, Europe/Andorra, Europe/Astrakhan, Europe/Athens, Europe/Belfast, Europe/Belgrade, Europe/Berlin, Europe/Bratislava, Europe/Brussels, Europe/Bucharest, Europe/Budapest, Europe/Busingen, Europe/Chisinau, Europe/Copenhagen, Europe/Dublin, Europe/Gibraltar, Europe/Guernsey, Europe/Helsinki, Europe/Isle_of_Man, Europe/Istanbul, Europe/Jersey, Europe/Kaliningrad, Europe/Kiev, Europe/Kirov, Europe/Lisbon, Europe/Ljubljana, Europe/London, Europe/Luxembourg, Europe/Madrid, Europe/Malta, Europe/Mariehamn, Europe/Minsk, Europe/Monaco, Europe/Moscow, Europe/Nicosia, Europe/Oslo, Europe/Paris, Europe/Podgorica, Europe/Prague, Europe/Riga, Europe/Rome, Europe/Samara, Europe/San_Marino, Europe/Sarajevo, Europe/Saratov, Europe/Simferopol, Europe/Skopje, Europe/Sofia, Europe/Stockholm, Europe/Tallinn, Europe/Tirane, Europe/Tiraspol, Europe/Ulyanovsk, Europe/Uzhgorod, Europe/Vaduz, Europe/Vatican, Europe/Vienna, Europe/Vilnius, Europe/Volgograd, Europe/Warsaw, Europe/Zagreb, Europe/Zaporozhye, Europe/Zurich, Factory, GB, GB-Eire, GMT, GMT+0, GMT-0, GMT0, Greenwich, HST, Hongkong, Iceland, Indian/Antananarivo, Indian/Chagos, Indian/Christmas, Indian/Cocos, Indian/Comoro, Indian/Kerguelen, Indian/Mahe, Indian/Maldives, Indian/Mauritius, Indian/Mayotte, Indian/Reunion, Iran, Israel, Jamaica, Japan, Kwajalein, Libya, MET, MST, MST7MDT, Mexico/BajaNorte, Mexico/BajaSur, Mexico/General, NZ, NZ-CHAT, Navajo, PRC, PST8PDT, Pacific/Apia, Pacific/Auckland, Pacific/Bougainville, Pacific/Chatham, Pacific/Chuuk, Pacific/Easter, Pacific/Efate, Pacific/Enderbury, Pacific/Fakaofo, Pacific/Fiji, Pacific/Funafuti, Pacific/Galapagos, Pacific/Gambier, Pacific/Guadalcanal, Pacific/Guam, Pacific/Honolulu, Pacific/Johnston, Pacific/Kiritimati, Pacific/Kosrae, Pacific/Kwajalein, Pacific/Majuro, Pacific/Marquesas, Pacific/Midway, Pacific/Nauru, Pacific/Niue, Pacific/Norfolk, Pacific/Noumea, Pacific/Pago_Pago, Pacific/Palau, Pacific/Pitcairn, Pacific/Pohnpei, Pacific/Ponape, Pacific/Port_Moresby, Pacific/Rarotonga, Pacific/Saipan, Pacific/Samoa, Pacific/Tahiti, Pacific/Tarawa, Pacific/Tongatapu, Pacific/Truk, Pacific/Wake, Pacific/Wallis, Pacific/Yap, Poland, Portugal, ROC, ROK, Singapore, Turkey, UCT, US/Alaska, US/Aleutian, US/Arizona, US/Central, US/East-Indiana, US/Eastern, US/Hawaii, US/Indiana-Starke, US/Michigan, US/Mountain, US/Pacific, US/Pacific-New, US/Samoa, UTC, Universal, W-SU, WET, Zulu, default */function(module){eval('module.exports = JSON.parse("{\\"Africa/Abidjan\\":0,\\"Africa/Accra\\":0,\\"Africa/Addis_Ababa\\":-180,\\"Africa/Algiers\\":-60,\\"Africa/Asmara\\":-180,\\"Africa/Asmera\\":-180,\\"Africa/Bamako\\":0,\\"Africa/Bangui\\":-60,\\"Africa/Banjul\\":0,\\"Africa/Bissau\\":0,\\"Africa/Blantyre\\":-120,\\"Africa/Brazzaville\\":-60,\\"Africa/Bujumbura\\":-120,\\"Africa/Cairo\\":-120,\\"Africa/Casablanca\\":0,\\"Africa/Ceuta\\":-60,\\"Africa/Conakry\\":0,\\"Africa/Dakar\\":0,\\"Africa/Dar_es_Salaam\\":-180,\\"Africa/Djibouti\\":-180,\\"Africa/Douala\\":-60,\\"Africa/El_Aaiun\\":0,\\"Africa/Freetown\\":0,\\"Africa/Gaborone\\":-120,\\"Africa/Harare\\":-120,\\"Africa/Johannesburg\\":-120,\\"Africa/Juba\\":-180,\\"Africa/Kampala\\":-180,\\"Africa/Khartoum\\":-120,\\"Africa/Kigali\\":-120,\\"Africa/Kinshasa\\":-60,\\"Africa/Lagos\\":-60,\\"Africa/Libreville\\":-60,\\"Africa/Lome\\":0,\\"Africa/Luanda\\":-60,\\"Africa/Lubumbashi\\":-120,\\"Africa/Lusaka\\":-120,\\"Africa/Malabo\\":-60,\\"Africa/Maputo\\":-120,\\"Africa/Maseru\\":-120,\\"Africa/Mbabane\\":-120,\\"Africa/Mogadishu\\":-180,\\"Africa/Monrovia\\":0,\\"Africa/Nairobi\\":-180,\\"Africa/Ndjamena\\":-60,\\"Africa/Niamey\\":-60,\\"Africa/Nouakchott\\":0,\\"Africa/Ouagadougou\\":0,\\"Africa/Porto-Novo\\":-60,\\"Africa/Sao_Tome\\":-60,\\"Africa/Timbuktu\\":0,\\"Africa/Tripoli\\":-120,\\"Africa/Tunis\\":-60,\\"Africa/Windhoek\\":-120,\\"America/Adak\\":600,\\"America/Anchorage\\":540,\\"America/Anguilla\\":240,\\"America/Antigua\\":240,\\"America/Araguaina\\":180,\\"America/Argentina/Buenos_Aires\\":180,\\"America/Argentina/Catamarca\\":180,\\"America/Argentina/ComodRivadavia\\":180,\\"America/Argentina/Cordoba\\":180,\\"America/Argentina/Jujuy\\":180,\\"America/Argentina/La_Rioja\\":180,\\"America/Argentina/Mendoza\\":180,\\"America/Argentina/Rio_Gallegos\\":180,\\"America/Argentina/Salta\\":180,\\"America/Argentina/San_Juan\\":180,\\"America/Argentina/San_Luis\\":180,\\"America/Argentina/Tucuman\\":180,\\"America/Argentina/Ushuaia\\":180,\\"America/Aruba\\":240,\\"America/Asuncion\\":240,\\"America/Atikokan\\":300,\\"America/Atka\\":600,\\"America/Bahia\\":180,\\"America/Bahia_Banderas\\":360,\\"America/Barbados\\":240,\\"America/Belem\\":180,\\"America/Belize\\":360,\\"America/Blanc-Sablon\\":240,\\"America/Boa_Vista\\":240,\\"America/Bogota\\":300,\\"America/Boise\\":420,\\"America/Buenos_Aires\\":180,\\"America/Cambridge_Bay\\":420,\\"America/Campo_Grande\\":240,\\"America/Cancun\\":300,\\"America/Caracas\\":240,\\"America/Catamarca\\":180,\\"America/Cayenne\\":180,\\"America/Cayman\\":300,\\"America/Chicago\\":360,\\"America/Chihuahua\\":420,\\"America/Coral_Harbour\\":300,\\"America/Cordoba\\":180,\\"America/Costa_Rica\\":360,\\"America/Creston\\":420,\\"America/Cuiaba\\":240,\\"America/Curacao\\":240,\\"America/Danmarkshavn\\":0,\\"America/Dawson\\":480,\\"America/Dawson_Creek\\":420,\\"America/Denver\\":420,\\"America/Detroit\\":300,\\"America/Dominica\\":240,\\"America/Edmonton\\":420,\\"America/Eirunepe\\":300,\\"America/El_Salvador\\":360,\\"America/Ensenada\\":480,\\"America/Fort_Nelson\\":420,\\"America/Fort_Wayne\\":300,\\"America/Fortaleza\\":180,\\"America/Glace_Bay\\":240,\\"America/Godthab\\":180,\\"America/Goose_Bay\\":240,\\"America/Grand_Turk\\":300,\\"America/Grenada\\":240,\\"America/Guadeloupe\\":240,\\"America/Guatemala\\":360,\\"America/Guayaquil\\":300,\\"America/Guyana\\":240,\\"America/Halifax\\":240,\\"America/Havana\\":300,\\"America/Hermosillo\\":420,\\"America/Indiana/Indianapolis\\":300,\\"America/Indiana/Knox\\":360,\\"America/Indiana/Marengo\\":300,\\"America/Indiana/Petersburg\\":300,\\"America/Indiana/Tell_City\\":360,\\"America/Indiana/Vevay\\":300,\\"America/Indiana/Vincennes\\":300,\\"America/Indiana/Winamac\\":300,\\"America/Indianapolis\\":300,\\"America/Inuvik\\":420,\\"America/Iqaluit\\":300,\\"America/Jamaica\\":300,\\"America/Jujuy\\":180,\\"America/Juneau\\":540,\\"America/Kentucky/Louisville\\":300,\\"America/Kentucky/Monticello\\":300,\\"America/Knox_IN\\":360,\\"America/Kralendijk\\":240,\\"America/La_Paz\\":240,\\"America/Lima\\":300,\\"America/Los_Angeles\\":480,\\"America/Louisville\\":300,\\"America/Lower_Princes\\":240,\\"America/Maceio\\":180,\\"America/Managua\\":360,\\"America/Manaus\\":240,\\"America/Marigot\\":240,\\"America/Martinique\\":240,\\"America/Matamoros\\":360,\\"America/Mazatlan\\":420,\\"America/Mendoza\\":180,\\"America/Menominee\\":360,\\"America/Merida\\":360,\\"America/Metlakatla\\":540,\\"America/Mexico_City\\":360,\\"America/Miquelon\\":180,\\"America/Moncton\\":240,\\"America/Monterrey\\":360,\\"America/Montevideo\\":180,\\"America/Montreal\\":300,\\"America/Montserrat\\":240,\\"America/Nassau\\":300,\\"America/New_York\\":300,\\"America/Nipigon\\":300,\\"America/Nome\\":540,\\"America/Noronha\\":120,\\"America/North_Dakota/Beulah\\":360,\\"America/North_Dakota/Center\\":360,\\"America/North_Dakota/New_Salem\\":360,\\"America/Ojinaga\\":420,\\"America/Panama\\":300,\\"America/Pangnirtung\\":300,\\"America/Paramaribo\\":180,\\"America/Phoenix\\":420,\\"America/Port-au-Prince\\":300,\\"America/Port_of_Spain\\":240,\\"America/Porto_Acre\\":300,\\"America/Porto_Velho\\":240,\\"America/Puerto_Rico\\":240,\\"America/Punta_Arenas\\":180,\\"America/Rainy_River\\":360,\\"America/Rankin_Inlet\\":360,\\"America/Recife\\":180,\\"America/Regina\\":360,\\"America/Resolute\\":360,\\"America/Rio_Branco\\":300,\\"America/Rosario\\":180,\\"America/Santa_Isabel\\":480,\\"America/Santarem\\":180,\\"America/Santiago\\":240,\\"America/Santo_Domingo\\":240,\\"America/Sao_Paulo\\":180,\\"America/Scoresbysund\\":60,\\"America/Shiprock\\":420,\\"America/Sitka\\":540,\\"America/St_Barthelemy\\":240,\\"America/St_Johns\\":210,\\"America/St_Kitts\\":240,\\"America/St_Lucia\\":240,\\"America/St_Thomas\\":240,\\"America/St_Vincent\\":240,\\"America/Swift_Current\\":360,\\"America/Tegucigalpa\\":360,\\"America/Thule\\":240,\\"America/Thunder_Bay\\":300,\\"America/Tijuana\\":480,\\"America/Toronto\\":300,\\"America/Tortola\\":240,\\"America/Vancouver\\":480,\\"America/Virgin\\":240,\\"America/Whitehorse\\":480,\\"America/Winnipeg\\":360,\\"America/Yakutat\\":540,\\"America/Yellowknife\\":420,\\"Antarctica/Casey\\":-480,\\"Antarctica/Davis\\":-420,\\"Antarctica/DumontDUrville\\":-600,\\"Antarctica/Macquarie\\":-660,\\"Antarctica/Mawson\\":-300,\\"Antarctica/McMurdo\\":-720,\\"Antarctica/Palmer\\":180,\\"Antarctica/Rothera\\":180,\\"Antarctica/South_Pole\\":-720,\\"Antarctica/Syowa\\":-180,\\"Antarctica/Troll\\":0,\\"Antarctica/Vostok\\":-360,\\"Arctic/Longyearbyen\\":-60,\\"Asia/Aden\\":-180,\\"Asia/Almaty\\":-360,\\"Asia/Amman\\":-120,\\"Asia/Anadyr\\":-720,\\"Asia/Aqtau\\":-300,\\"Asia/Aqtobe\\":-300,\\"Asia/Ashgabat\\":-300,\\"Asia/Ashkhabad\\":-300,\\"Asia/Atyrau\\":-300,\\"Asia/Baghdad\\":-180,\\"Asia/Bahrain\\":-180,\\"Asia/Baku\\":-240,\\"Asia/Bangkok\\":-420,\\"Asia/Barnaul\\":-420,\\"Asia/Beirut\\":-120,\\"Asia/Bishkek\\":-360,\\"Asia/Brunei\\":-480,\\"Asia/Calcutta\\":-330,\\"Asia/Chita\\":-540,\\"Asia/Choibalsan\\":-480,\\"Asia/Chongqing\\":-480,\\"Asia/Chungking\\":-480,\\"Asia/Colombo\\":-330,\\"Asia/Dacca\\":-360,\\"Asia/Damascus\\":-120,\\"Asia/Dhaka\\":-360,\\"Asia/Dili\\":-540,\\"Asia/Dubai\\":-240,\\"Asia/Dushanbe\\":-300,\\"Asia/Famagusta\\":-120,\\"Asia/Gaza\\":-120,\\"Asia/Harbin\\":-480,\\"Asia/Hebron\\":-120,\\"Asia/Ho_Chi_Minh\\":-420,\\"Asia/Hong_Kong\\":-480,\\"Asia/Hovd\\":-420,\\"Asia/Irkutsk\\":-480,\\"Asia/Istanbul\\":-180,\\"Asia/Jakarta\\":-420,\\"Asia/Jayapura\\":-540,\\"Asia/Jerusalem\\":-120,\\"Asia/Kabul\\":-270,\\"Asia/Kamchatka\\":-720,\\"Asia/Karachi\\":-300,\\"Asia/Kashgar\\":-360,\\"Asia/Kathmandu\\":-345,\\"Asia/Katmandu\\":-345,\\"Asia/Khandyga\\":-540,\\"Asia/Kolkata\\":-330,\\"Asia/Krasnoyarsk\\":-420,\\"Asia/Kuala_Lumpur\\":-480,\\"Asia/Kuching\\":-480,\\"Asia/Kuwait\\":-180,\\"Asia/Macao\\":-480,\\"Asia/Macau\\":-480,\\"Asia/Magadan\\":-660,\\"Asia/Makassar\\":-480,\\"Asia/Manila\\":-480,\\"Asia/Muscat\\":-240,\\"Asia/Nicosia\\":-120,\\"Asia/Novokuznetsk\\":-420,\\"Asia/Novosibirsk\\":-420,\\"Asia/Omsk\\":-360,\\"Asia/Oral\\":-300,\\"Asia/Phnom_Penh\\":-420,\\"Asia/Pontianak\\":-420,\\"Asia/Pyongyang\\":-540,\\"Asia/Qatar\\":-180,\\"Asia/Qyzylorda\\":-360,\\"Asia/Rangoon\\":-390,\\"Asia/Riyadh\\":-180,\\"Asia/Saigon\\":-420,\\"Asia/Sakhalin\\":-660,\\"Asia/Samarkand\\":-300,\\"Asia/Seoul\\":-540,\\"Asia/Shanghai\\":-480,\\"Asia/Singapore\\":-480,\\"Asia/Srednekolymsk\\":-660,\\"Asia/Taipei\\":-480,\\"Asia/Tashkent\\":-300,\\"Asia/Tbilisi\\":-240,\\"Asia/Tehran\\":-210,\\"Asia/Tel_Aviv\\":-120,\\"Asia/Thimbu\\":-360,\\"Asia/Thimphu\\":-360,\\"Asia/Tokyo\\":-540,\\"Asia/Tomsk\\":-420,\\"Asia/Ujung_Pandang\\":-480,\\"Asia/Ulaanbaatar\\":-480,\\"Asia/Ulan_Bator\\":-480,\\"Asia/Urumqi\\":-360,\\"Asia/Ust-Nera\\":-600,\\"Asia/Vientiane\\":-420,\\"Asia/Vladivostok\\":-600,\\"Asia/Yakutsk\\":-540,\\"Asia/Yangon\\":-390,\\"Asia/Yekaterinburg\\":-300,\\"Asia/Yerevan\\":-240,\\"Atlantic/Azores\\":60,\\"Atlantic/Bermuda\\":240,\\"Atlantic/Canary\\":0,\\"Atlantic/Cape_Verde\\":60,\\"Atlantic/Faeroe\\":0,\\"Atlantic/Faroe\\":0,\\"Atlantic/Jan_Mayen\\":-60,\\"Atlantic/Madeira\\":0,\\"Atlantic/Reykjavik\\":0,\\"Atlantic/South_Georgia\\":120,\\"Atlantic/St_Helena\\":0,\\"Atlantic/Stanley\\":180,\\"Australia/ACT\\":-600,\\"Australia/Adelaide\\":-570,\\"Australia/Brisbane\\":-600,\\"Australia/Broken_Hill\\":-570,\\"Australia/Canberra\\":-600,\\"Australia/Currie\\":-600,\\"Australia/Darwin\\":-570,\\"Australia/Eucla\\":-525,\\"Australia/Hobart\\":-600,\\"Australia/LHI\\":-630,\\"Australia/Lindeman\\":-600,\\"Australia/Lord_Howe\\":-630,\\"Australia/Melbourne\\":-600,\\"Australia/NSW\\":-600,\\"Australia/North\\":-570,\\"Australia/Perth\\":-480,\\"Australia/Queensland\\":-600,\\"Australia/South\\":-570,\\"Australia/Sydney\\":-600,\\"Australia/Tasmania\\":-600,\\"Australia/Victoria\\":-600,\\"Australia/West\\":-480,\\"Australia/Yancowinna\\":-570,\\"Brazil/Acre\\":300,\\"Brazil/DeNoronha\\":120,\\"Brazil/East\\":180,\\"Brazil/West\\":240,\\"CET\\":-60,\\"CST6CDT\\":360,\\"Canada/Atlantic\\":240,\\"Canada/Central\\":360,\\"Canada/Eastern\\":300,\\"Canada/Mountain\\":420,\\"Canada/Newfoundland\\":210,\\"Canada/Pacific\\":480,\\"Canada/Saskatchewan\\":360,\\"Canada/Yukon\\":480,\\"Chile/Continental\\":240,\\"Chile/EasterIsland\\":360,\\"Cuba\\":300,\\"EET\\":-120,\\"EST\\":300,\\"EST5EDT\\":300,\\"Egypt\\":-120,\\"Eire\\":-60,\\"Etc/GMT\\":0,\\"Etc/GMT+0\\":0,\\"Etc/GMT+1\\":60,\\"Etc/GMT+10\\":600,\\"Etc/GMT+11\\":660,\\"Etc/GMT+12\\":720,\\"Etc/GMT+2\\":120,\\"Etc/GMT+3\\":180,\\"Etc/GMT+4\\":240,\\"Etc/GMT+5\\":300,\\"Etc/GMT+6\\":360,\\"Etc/GMT+7\\":420,\\"Etc/GMT+8\\":480,\\"Etc/GMT+9\\":540,\\"Etc/GMT-0\\":0,\\"Etc/GMT-1\\":-60,\\"Etc/GMT-10\\":-600,\\"Etc/GMT-11\\":-660,\\"Etc/GMT-12\\":-720,\\"Etc/GMT-13\\":-780,\\"Etc/GMT-14\\":-840,\\"Etc/GMT-2\\":-120,\\"Etc/GMT-3\\":-180,\\"Etc/GMT-4\\":-240,\\"Etc/GMT-5\\":-300,\\"Etc/GMT-6\\":-360,\\"Etc/GMT-7\\":-420,\\"Etc/GMT-8\\":-480,\\"Etc/GMT-9\\":-540,\\"Etc/GMT0\\":0,\\"Etc/Greenwich\\":0,\\"Etc/UCT\\":0,\\"Etc/UTC\\":0,\\"Etc/Universal\\":0,\\"Etc/Zulu\\":0,\\"Europe/Amsterdam\\":-60,\\"Europe/Andorra\\":-60,\\"Europe/Astrakhan\\":-240,\\"Europe/Athens\\":-120,\\"Europe/Belfast\\":0,\\"Europe/Belgrade\\":-60,\\"Europe/Berlin\\":-60,\\"Europe/Bratislava\\":-60,\\"Europe/Brussels\\":-60,\\"Europe/Bucharest\\":-120,\\"Europe/Budapest\\":-60,\\"Europe/Busingen\\":-60,\\"Europe/Chisinau\\":-120,\\"Europe/Copenhagen\\":-60,\\"Europe/Dublin\\":-60,\\"Europe/Gibraltar\\":-60,\\"Europe/Guernsey\\":0,\\"Europe/Helsinki\\":-120,\\"Europe/Isle_of_Man\\":0,\\"Europe/Istanbul\\":-180,\\"Europe/Jersey\\":0,\\"Europe/Kaliningrad\\":-120,\\"Europe/Kiev\\":-120,\\"Europe/Kirov\\":-180,\\"Europe/Lisbon\\":0,\\"Europe/Ljubljana\\":-60,\\"Europe/London\\":0,\\"Europe/Luxembourg\\":-60,\\"Europe/Madrid\\":-60,\\"Europe/Malta\\":-60,\\"Europe/Mariehamn\\":-120,\\"Europe/Minsk\\":-180,\\"Europe/Monaco\\":-60,\\"Europe/Moscow\\":-180,\\"Europe/Nicosia\\":-120,\\"Europe/Oslo\\":-60,\\"Europe/Paris\\":-60,\\"Europe/Podgorica\\":-60,\\"Europe/Prague\\":-60,\\"Europe/Riga\\":-120,\\"Europe/Rome\\":-60,\\"Europe/Samara\\":-240,\\"Europe/San_Marino\\":-60,\\"Europe/Sarajevo\\":-60,\\"Europe/Saratov\\":-240,\\"Europe/Simferopol\\":-180,\\"Europe/Skopje\\":-60,\\"Europe/Sofia\\":-120,\\"Europe/Stockholm\\":-60,\\"Europe/Tallinn\\":-120,\\"Europe/Tirane\\":-60,\\"Europe/Tiraspol\\":-120,\\"Europe/Ulyanovsk\\":-240,\\"Europe/Uzhgorod\\":-120,\\"Europe/Vaduz\\":-60,\\"Europe/Vatican\\":-60,\\"Europe/Vienna\\":-60,\\"Europe/Vilnius\\":-120,\\"Europe/Volgograd\\":-180,\\"Europe/Warsaw\\":-60,\\"Europe/Zagreb\\":-60,\\"Europe/Zaporozhye\\":-120,\\"Europe/Zurich\\":-60,\\"Factory\\":0,\\"GB\\":0,\\"GB-Eire\\":0,\\"GMT\\":0,\\"GMT+0\\":0,\\"GMT-0\\":0,\\"GMT0\\":0,\\"Greenwich\\":0,\\"HST\\":600,\\"Hongkong\\":-480,\\"Iceland\\":0,\\"Indian/Antananarivo\\":-180,\\"Indian/Chagos\\":-360,\\"Indian/Christmas\\":-420,\\"Indian/Cocos\\":-390,\\"Indian/Comoro\\":-180,\\"Indian/Kerguelen\\":-300,\\"Indian/Mahe\\":-240,\\"Indian/Maldives\\":-300,\\"Indian/Mauritius\\":-240,\\"Indian/Mayotte\\":-180,\\"Indian/Reunion\\":-240,\\"Iran\\":-210,\\"Israel\\":-120,\\"Jamaica\\":300,\\"Japan\\":-540,\\"Kwajalein\\":-720,\\"Libya\\":-120,\\"MET\\":-60,\\"MST\\":420,\\"MST7MDT\\":420,\\"Mexico/BajaNorte\\":480,\\"Mexico/BajaSur\\":420,\\"Mexico/General\\":360,\\"NZ\\":-720,\\"NZ-CHAT\\":-765,\\"Navajo\\":420,\\"PRC\\":-480,\\"PST8PDT\\":480,\\"Pacific/Apia\\":-780,\\"Pacific/Auckland\\":-720,\\"Pacific/Bougainville\\":-660,\\"Pacific/Chatham\\":-765,\\"Pacific/Chuuk\\":-600,\\"Pacific/Easter\\":360,\\"Pacific/Efate\\":-660,\\"Pacific/Enderbury\\":-780,\\"Pacific/Fakaofo\\":-780,\\"Pacific/Fiji\\":-720,\\"Pacific/Funafuti\\":-720,\\"Pacific/Galapagos\\":360,\\"Pacific/Gambier\\":540,\\"Pacific/Guadalcanal\\":-660,\\"Pacific/Guam\\":-600,\\"Pacific/Honolulu\\":600,\\"Pacific/Johnston\\":600,\\"Pacific/Kiritimati\\":-840,\\"Pacific/Kosrae\\":-660,\\"Pacific/Kwajalein\\":-720,\\"Pacific/Majuro\\":-720,\\"Pacific/Marquesas\\":570,\\"Pacific/Midway\\":660,\\"Pacific/Nauru\\":-720,\\"Pacific/Niue\\":660,\\"Pacific/Norfolk\\":-660,\\"Pacific/Noumea\\":-660,\\"Pacific/Pago_Pago\\":660,\\"Pacific/Palau\\":-540,\\"Pacific/Pitcairn\\":480,\\"Pacific/Pohnpei\\":-660,\\"Pacific/Ponape\\":-660,\\"Pacific/Port_Moresby\\":-600,\\"Pacific/Rarotonga\\":600,\\"Pacific/Saipan\\":-600,\\"Pacific/Samoa\\":660,\\"Pacific/Tahiti\\":600,\\"Pacific/Tarawa\\":-720,\\"Pacific/Tongatapu\\":-780,\\"Pacific/Truk\\":-600,\\"Pacific/Wake\\":-720,\\"Pacific/Wallis\\":-720,\\"Pacific/Yap\\":-600,\\"Poland\\":-60,\\"Portugal\\":0,\\"ROC\\":-480,\\"ROK\\":-540,\\"Singapore\\":-480,\\"Turkey\\":-180,\\"UCT\\":0,\\"US/Alaska\\":540,\\"US/Aleutian\\":600,\\"US/Arizona\\":420,\\"US/Central\\":360,\\"US/East-Indiana\\":300,\\"US/Eastern\\":300,\\"US/Hawaii\\":600,\\"US/Indiana-Starke\\":360,\\"US/Michigan\\":300,\\"US/Mountain\\":420,\\"US/Pacific\\":480,\\"US/Pacific-New\\":480,\\"US/Samoa\\":660,\\"UTC\\":0,\\"Universal\\":0,\\"W-SU\\":-180,\\"WET\\":0,\\"Zulu\\":0}");\n\n//# sourceURL=webpack://preqlmariadb/./node_modules/tz-offset/generated/offsets.json?')},"./node_modules/tz-offset/src/tz-offset.js":
/*!*************************************************!*\
  !*** ./node_modules/tz-offset/src/tz-offset.js ***!
  \*************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\nconst offsets = __webpack_require__(/*! ../generated/offsets.json */ \"./node_modules/tz-offset/generated/offsets.json\");\n\nmodule.exports = (() => {\n\n    const offsetOf = (timezone) => {\n        const offset = offsets[timezone];\n        if (offset != undefined && offset != null) {\n            return offset;\n        } else {\n            throw Error('Invalid timezone ' + timezone);\n        }\n    };\n\n    const removeOffset = (date) => {\n        const currentOffset = date.getTimezoneOffset() * -60000;\n        return date.getTime() - currentOffset;\n    };\n\n    const timeAt = (date, timezone) => {\n        const timeUtc = removeOffset(date);\n        const offset = offsetOf(timezone) * -60000;\n        return new Date(timeUtc + offset);\n    };\n\n    return {\n        offsetOf,\n        removeOffset,\n        timeAt\n    };\n})();\n\n\n//# sourceURL=webpack://preqlmariadb/./node_modules/tz-offset/src/tz-offset.js?")},"./source/Commands/transpile.ts":
/*!**************************************!*\
  !*** ./source/Commands/transpile.ts ***!
  \**************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nconst attribute_1 = __importDefault(__webpack_require__(/*! ../Transpilers/attribute */ "./source/Transpilers/attribute.ts"));\nconst database_1 = __importDefault(__webpack_require__(/*! ../Transpilers/database */ "./source/Transpilers/database.ts"));\nconst entry_1 = __importDefault(__webpack_require__(/*! ../Transpilers/entry */ "./source/Transpilers/entry.ts"));\nconst foreignkey_1 = __importDefault(__webpack_require__(/*! ../Transpilers/foreignkey */ "./source/Transpilers/foreignkey.ts"));\nconst plainindex_1 = __importDefault(__webpack_require__(/*! ../Transpilers/plainindex */ "./source/Transpilers/plainindex.ts"));\nconst postamble_1 = __importDefault(__webpack_require__(/*! ../Transpilers/postamble */ "./source/Transpilers/postamble.ts"));\nconst preamble_1 = __importDefault(__webpack_require__(/*! ../Transpilers/preamble */ "./source/Transpilers/preamble.ts"));\nconst spatialindex_1 = __importDefault(__webpack_require__(/*! ../Transpilers/spatialindex */ "./source/Transpilers/spatialindex.ts"));\nconst struct_1 = __importDefault(__webpack_require__(/*! ../Transpilers/struct */ "./source/Transpilers/struct.ts"));\nconst textindex_1 = __importDefault(__webpack_require__(/*! ../Transpilers/textindex */ "./source/Transpilers/textindex.ts"));\nconst uniqueindex_1 = __importDefault(__webpack_require__(/*! ../Transpilers/uniqueindex */ "./source/Transpilers/uniqueindex.ts"));\nconst server_1 = __importDefault(__webpack_require__(/*! ../Transpilers/server */ "./source/Transpilers/server.ts"));\n// This will break once you upgrade to a higher version of MariaDB.\n// See: https://dataedo.com/kb/query/mariadb/list-check-constraints-in-database\n// https://stackoverflow.com/questions/12637945/how-can-i-delete-all-the-triggers-in-a-mysql-database-using-one-sql-statement\nconst dropAllPreqlCheckConstraintsForTableTemplate = (db) => {\n    const schemaName = db.spec.name;\n    const spName = `${schemaName}.dropAllPreqlCheckConstraintsForTable`;\n    return `DROP PROCEDURE IF EXISTS ${spName};\\r\\n`\n        + "DELIMITER $$\\r\\n"\n        + `CREATE PROCEDURE ${spName} (IN param_table VARCHAR(255))\\r\\n`\n        + "BEGIN\\r\\n"\n        + "\\tDECLARE done BOOLEAN DEFAULT FALSE;\\r\\n"\n        + "\\tDECLARE dropCommand VARCHAR(255);\\r\\n"\n        + "\\tDECLARE dropCur CURSOR FOR\\r\\n"\n        + `\\t\\tSELECT concat(\'ALTER TABLE ${schemaName}.\', table_name, \' DROP CONSTRAINT \', constraint_name, \';\')\\r\\n`\n        + "\\t\\tFROM information_schema.table_constraints\\r\\n"\n        + "\\t\\tWHERE\\r\\n"\n        + "\\t\\t\\tconstraint_type = \'CHECK\'\\r\\n"\n        + "\\t\\t\\tAND constraint_name LIKE \'preql_\'\\r\\n"\n        + `\\t\\t\\tAND table_schema = \'${schemaName}\'\\r\\n`\n        + "\\t\\t\\tAND table_name = param_table;\\r\\n"\n        + "\\tDECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;\\r\\n"\n        + "\\tOPEN dropCur;\\r\\n"\n        + "\\tread_loop: LOOP\\r\\n"\n        + "\\t\\tFETCH dropCur\\r\\n"\n        + "\\t\\tINTO dropCommand;\\r\\n"\n        + "\\t\\tIF done THEN\\r\\n"\n        + "\\t\\t\\tLEAVE read_loop;\\r\\n"\n        + "\\t\\tEND IF;\\r\\n"\n        + "\\t\\tSET @sdropCommand = dropCommand;\\r\\n"\n        + "\\t\\tPREPARE dropClientUpdateKeyStmt FROM @sdropCommand;\\r\\n"\n        + "\\t\\tEXECUTE dropClientUpdateKeyStmt;\\r\\n"\n        + "\\t\\tDEALLOCATE PREPARE dropClientUpdateKeyStmt;\\r\\n"\n        + "\\tEND LOOP;\\r\\n"\n        + "\\tCLOSE dropCur;\\r\\n"\n        + "END $$\\r\\n"\n        + "DELIMITER ;";\n};\nconst callDropAllPreqlCheckConstraintsForTableTemplate = (struct) => `CALL ${struct.spec.databaseName}.dropAllPreqlCheckConstraintsForTable(\'${struct.spec.name}\');`;\nconst transpile = async (etcd, logger) => {\n    let transpilations = [];\n    const preambles = etcd.kindIndex.preamble;\n    if (preambles && preambles.length > 0) {\n        transpilations = transpilations.concat(await Promise.all(preambles.map(async (obj) => preamble_1.default(obj))));\n    }\n    const servers = etcd.kindIndex.server;\n    if (servers && servers.length > 0) {\n        transpilations = transpilations.concat(await Promise.all(servers.map(async (obj) => server_1.default(obj, logger, etcd))));\n    }\n    const databases = etcd.kindIndex.database;\n    if (databases && databases.length > 0) {\n        transpilations = transpilations.concat(await Promise.all(databases.map(async (obj) => database_1.default(obj, logger, etcd))));\n        transpilations = transpilations.concat(await Promise.all(databases.map(async (obj) => dropAllPreqlCheckConstraintsForTableTemplate(obj))));\n    }\n    const structs = etcd.kindIndex.struct;\n    if (structs && structs.length > 0) {\n        transpilations = transpilations.concat(await Promise.all(structs.map(async (obj) => struct_1.default(obj, logger, etcd))));\n        transpilations = transpilations.concat(await Promise.all(structs.map(async (obj) => callDropAllPreqlCheckConstraintsForTableTemplate(obj))));\n    }\n    const attributes = etcd.kindIndex.attribute;\n    if (attributes && attributes.length > 0) {\n        transpilations = transpilations.concat(await Promise.all(attributes.map(async (obj) => attribute_1.default(obj, logger, etcd))));\n    }\n    const plainindexes = etcd.kindIndex.plainindex;\n    if (plainindexes && plainindexes.length > 0) {\n        transpilations = transpilations.concat(await Promise.all(plainindexes.map(async (obj) => plainindex_1.default(obj))));\n    }\n    const uniqueindexes = etcd.kindIndex.uniqueindex;\n    if (uniqueindexes && uniqueindexes.length > 0) {\n        transpilations = transpilations.concat(await Promise.all(uniqueindexes.map(async (obj) => uniqueindex_1.default(obj))));\n    }\n    const textindexes = etcd.kindIndex.textindex;\n    if (textindexes && textindexes.length > 0) {\n        transpilations = transpilations.concat(await Promise.all(textindexes.map(async (obj) => textindex_1.default(obj))));\n    }\n    const spatialindexes = etcd.kindIndex.spatialindex;\n    if (spatialindexes && spatialindexes.length > 0) {\n        transpilations = transpilations.concat(await Promise.all(spatialindexes.map(async (obj) => spatialindex_1.default(obj))));\n    }\n    const foreignKeys = etcd.kindIndex.foreignkey;\n    if (foreignKeys && foreignKeys.length > 0) {\n        transpilations = transpilations.concat(await Promise.all(foreignKeys.map(async (obj) => foreignkey_1.default(obj))));\n    }\n    const entries = etcd.kindIndex.entry;\n    if (entries && entries.length > 0) {\n        transpilations = transpilations.concat(await Promise.all(entries.map(async (obj) => entry_1.default(obj))));\n    }\n    const postambles = etcd.kindIndex.postamble;\n    if (postambles && postambles.length !== 0) {\n        transpilations = transpilations.concat(await Promise.all(postambles.map(async (obj) => postamble_1.default(obj))));\n    }\n    return "START TRANSACTION;\\r\\n\\r\\n"\n        + `${transpilations.filter((t) => (t !== "")).join("\\r\\n\\r\\n")}\\r\\n\\r\\n`\n        + "COMMIT;\\r\\n";\n};\nexports.default = transpile;\n\n\n//# sourceURL=webpack://preqlmariadb/./source/Commands/transpile.ts?')},"./source/ConsoleLogger.ts":
/*!*********************************!*\
  !*** ./source/ConsoleLogger.ts ***!
  \*********************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nclass ConsoleLogger {\n    debug(event) {\n        if (console)\n            console.debug(event);\n    }\n    info(event) {\n        if (console)\n            console.info(event);\n    }\n    warn(event) {\n        if (console)\n            console.warn(event);\n    }\n    error(event) {\n        if (console)\n            console.error(event);\n    }\n}\nexports.default = ConsoleLogger;\n\n\n//# sourceURL=webpack://preqlmariadb/./source/ConsoleLogger.ts?')},"./source/Transpilers/attribute.ts":
/*!*****************************************!*\
  !*** ./source/Transpilers/attribute.ts ***!
  \*****************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nconst transpileAttribute = async (obj, logger, etcd) => {\n    const tableName = obj.spec.multiValued\n        ? `${obj.spec.structName}_${obj.spec.name}`\n        : obj.spec.structName;\n    let columnString = "";\n    if (obj.spec.multiValued) {\n        columnString = (`CREATE TABLE IF NOT EXISTS ${obj.spec.databaseName}.${tableName} (\\r\\n`\n            + `\\t${obj.spec.structName}_id BIGINT UNSIGNED NOT NULL,\\r\\n`\n            + `\\tFOREIGN KEY (${obj.spec.structName}_id) REFERENCES ${obj.spec.structName} (id)\\r\\n`\n            + ");\\r\\n");\n    }\n    const type = obj.spec.type.toLowerCase();\n    const datatype = (etcd.kindIndex.datatype || [])\n        .find((dt) => dt.metadata.name.toLowerCase() === type);\n    if (!datatype) {\n        throw new Error(`Data type \'${type}\' not recognized.`);\n    }\n    columnString += `ALTER TABLE ${obj.spec.databaseName}.${tableName}\\r\\n`\n        + `ADD COLUMN IF NOT EXISTS \\`${obj.spec.name}\\` `;\n    if (datatype.spec.values) {\n        const maxLengthValue = datatype.spec.values.sort((a, b) => (b.length - a.length))[0].length;\n        columnString += `CHAR(${maxLengthValue})`;\n    }\n    else if (datatype.spec.targets.mariadb) {\n        columnString += datatype.spec.targets.mariadb.nativeType;\n    }\n    else if (datatype.spec.targets.mysql) {\n        columnString += datatype.spec.targets.mysql.nativeType;\n    }\n    else {\n        throw new Error(`DataType \'${datatype.metadata.name}\' has no MariaDB or MySQL equivalent.`);\n    }\n    if (obj.spec.characterSet) {\n        const characterSet = etcd.kindIndex.characterset\n            .find((cs) => obj.spec.characterSet === cs.spec.name);\n        if (characterSet) {\n            const mariaDBEquivalent = characterSet.spec.targetEquivalents.mariadb\n                || characterSet.spec.targetEquivalents.mysql;\n            if (mariaDBEquivalent) {\n                columnString += ` CHARACTER SET \'${mariaDBEquivalent}\'`;\n            }\n            else {\n                logger.warn("No MariaDB or MySQL equivalent character set for PreQL "\n                    + `character set \'${characterSet.metadata.name}\'.`);\n            }\n        }\n        else {\n            logger.error(`Expected CharacterSet \'${obj.spec.characterSet}\' did not exist! `\n                + "This is a bug in the PreQL Core library.");\n        }\n    }\n    if (obj.spec.collation) {\n        const collation = etcd.kindIndex.collation\n            .find((c) => obj.spec.collation === c.spec.name);\n        if (collation) {\n            const mariaDBEquivalent = collation.spec.targetEquivalents.mariadb\n                || collation.spec.targetEquivalents.mysql;\n            if (mariaDBEquivalent) {\n                columnString += ` COLLATE \'${mariaDBEquivalent}\'`;\n            }\n            else {\n                logger.warn("No MariaDB or MySQL equivalent collation for PreQL "\n                    + `collation \'${collation.metadata.name}\'.`);\n            }\n        }\n        else {\n            logger.error(`Expected Collation \'${obj.spec.characterSet}\' did not exist! `\n                + "This is a bug in the PreQL Core library.");\n        }\n    }\n    if (obj.spec.nullable && (!obj.spec.multiValued))\n        columnString += " NULL";\n    else\n        columnString += " NOT NULL";\n    // Simply quoting the default value is fine, because MariaDB will cast it.\n    if (obj.spec.default)\n        columnString += ` DEFAULT \'${obj.spec.default}\'`;\n    if (obj.metadata.annotations && obj.metadata.annotations.comment) {\n        columnString += `\\r\\nCOMMENT \'${obj.metadata.annotations.comment}\'`;\n    }\n    columnString += ";";\n    if (datatype.spec.values) {\n        columnString += "\\r\\n";\n        const storedProcedureName = `${obj.spec.databaseName}.add_enum_${datatype.spec.name}`;\n        const foreignKeyName = `enum_${obj.spec.structName}_${obj.spec.name}`;\n        const enumTableName = `${datatype.spec.name}_enum`;\n        const maxLengthValue = datatype.spec.values.sort((a, b) => (b.length - a.length))[0].length;\n        // Add Enum Table\n        columnString += (`CREATE TABLE IF NOT EXISTS ${obj.spec.databaseName}.${enumTableName} (\\r\\n`\n            + `\\tvalue CHAR(${maxLengthValue}) NOT NULL PRIMARY KEY\\r\\n`\n            + ");\\r\\n");\n        // Insert Enum Values\n        columnString += (`INSERT IGNORE INTO ${obj.spec.databaseName}.${enumTableName} VALUES\\r\\n`\n            + datatype.spec.values\n                .map((v, i) => `\\t/* ${obj.spec.databaseName}.${enumTableName}[${i}] */ (\'${v}\')`)\n                .join(",\\r\\n")\n            + "\\r\\n;\\r\\n");\n        // Add FKC\n        columnString += (`DROP PROCEDURE IF EXISTS ${storedProcedureName};\\r\\n`\n            + "DELIMITER $$\\r\\n"\n            + `CREATE PROCEDURE ${storedProcedureName} ()\\r\\n`\n            + "BEGIN\\r\\n"\n            + "\\tDECLARE EXIT HANDLER FOR 1005 DO 0;\\r\\n"\n            + `\\tALTER TABLE ${obj.spec.databaseName}.${obj.spec.structName}\\r\\n`\n            + `\\tADD CONSTRAINT ${foreignKeyName} FOREIGN KEY\\r\\n`\n            + `\\tIF NOT EXISTS ${foreignKeyName}_index (\\`${obj.spec.name}\\`)\\r\\n`\n            + `\\tREFERENCES ${enumTableName} (value);\\r\\n`\n            + "END $$\\r\\n"\n            + "DELIMITER ;\\r\\n"\n            + `CALL ${storedProcedureName};\\r\\n`\n            + `DROP PROCEDURE IF EXISTS ${storedProcedureName};`);\n        return columnString;\n    }\n    if (datatype.spec.regexes && datatype.spec.regexes.pcre) {\n        const checkRegexps = [];\n        const constraintBaseName = `${obj.spec.databaseName}.${tableName}.preql_${obj.spec.name}`;\n        // Every regex within a group must match.\n        Object.entries(datatype.spec.regexes.pcre).forEach((group) => {\n            const groupRegexps = [];\n            if (!(datatype.spec.regexes))\n                return; // Just to make TypeScript happy.\n            Object.entries(datatype.spec.regexes.pcre[group[0]]).forEach((re) => {\n                groupRegexps.push(`${obj.spec.name} ${re[1].positive ? "" : "NOT"} REGEXP \'${re[1].pattern.replace("\'", "\'\'")}\'`);\n            });\n            checkRegexps.push(`(${groupRegexps.join(" AND ")})`);\n        });\n        const qualifiedTableName = `${obj.spec.databaseName}.${tableName}`;\n        columnString += (`\\r\\nALTER TABLE ${qualifiedTableName}\\r\\n`\n            + `DROP CONSTRAINT IF EXISTS ${constraintBaseName};\\r\\n`\n            + `ALTER TABLE ${qualifiedTableName}\\r\\n`\n            + `ADD CONSTRAINT IF NOT EXISTS ${constraintBaseName}\\r\\n`\n            + `CHECK (${checkRegexps.join(" OR ")});`);\n    }\n    if (datatype.spec.setters) {\n        const qualifiedTableName = `${obj.spec.databaseName}.${tableName}`;\n        let previousExpression = `NEW.${obj.spec.name}`;\n        const triggerBaseName = `${obj.spec.databaseName}.preql_${tableName}_${obj.spec.name}`;\n        datatype.spec.setters.forEach((setter) => {\n            // REVIEW: I had some weird issues with this, hence "as string."\n            switch (setter.type.toLowerCase()) {\n                case ("trim"): {\n                    previousExpression = (() => {\n                        if (!(setter.side))\n                            return `TRIM(${previousExpression})`;\n                        if (setter.side.toLowerCase() === "left")\n                            return `LTRIM(${previousExpression})`;\n                        if (setter.side.toLowerCase() === "right")\n                            return `RTRIM(${previousExpression})`;\n                        return `TRIM(${previousExpression})`;\n                    })();\n                    break;\n                }\n                case ("substring"): {\n                    if (setter.toIndex) {\n                        previousExpression = `SUBSTRING(${previousExpression}, ${setter.fromIndex + 1}, ${setter.toIndex + 1})`;\n                    }\n                    else {\n                        previousExpression = `SUBSTRING(${previousExpression}, ${setter.fromIndex + 1})`;\n                    }\n                    break;\n                }\n                case ("replace"): {\n                    const from = setter.from.replace("\'", "\'\'").replace("\\\\", "\\\\\\\\");\n                    const to = setter.to.replace("\'", "\'\'").replace("\\\\", "\\\\\\\\");\n                    previousExpression = `REPLACE(${previousExpression}, ${from}, ${to})`;\n                    break;\n                }\n                case ("case"): {\n                    switch (setter.casing) {\n                        case ("upper"):\n                            previousExpression = `UPPER(${previousExpression})`;\n                            break;\n                        case ("lower"):\n                            previousExpression = `LOWER(${previousExpression})`;\n                            break;\n                        default: {\n                            throw new Error(`Invalid casing: \'${setter.casing}\'.`);\n                        }\n                    }\n                    break;\n                }\n                case ("pad"): {\n                    const padString = setter.padString.replace("\'", "\'\'").replace("\\\\", "\\\\\\\\");\n                    switch (setter.side) {\n                        case ("left"): {\n                            previousExpression = `LPAD(${previousExpression}, ${setter.padLength}, ${padString})`;\n                            break;\n                        }\n                        case ("right"): {\n                            previousExpression = `RPAD(${previousExpression}, ${setter.padLength}, \'${padString}\')`;\n                            break;\n                        }\n                        default: {\n                            throw new Error(`Invalid side: \'${setter.side}\'.`);\n                        }\n                    }\n                    break;\n                }\n                case ("now"):\n                    previousExpression = "NOW()";\n                    break;\n                default: {\n                    // REVIEW: I had some weird issues with this, hence "as string."\n                    throw new Error(`Setter \'${setter.type.toLowerCase()}\' not understood.`);\n                }\n            }\n        });\n        columnString += (`\\r\\nDROP TRIGGER IF EXISTS ${triggerBaseName}_insert;\\r\\n`\n            + `CREATE TRIGGER IF NOT EXISTS ${triggerBaseName}_insert\\r\\n`\n            + `BEFORE INSERT ON ${qualifiedTableName} FOR EACH ROW\\r\\n`\n            + `SET NEW.${obj.spec.name} = ${previousExpression};\\r\\n`\n            + `DROP TRIGGER IF EXISTS ${triggerBaseName}_update;\\r\\n`\n            + `CREATE TRIGGER IF NOT EXISTS ${triggerBaseName}_update\\r\\n`\n            + `BEFORE UPDATE ON ${qualifiedTableName} FOR EACH ROW\\r\\n`\n            + `SET NEW.${obj.spec.name} = ${previousExpression};`);\n    }\n    return columnString;\n};\nexports.default = transpileAttribute;\n\n\n//# sourceURL=webpack://preqlmariadb/./source/Transpilers/attribute.ts?')},"./source/Transpilers/database.ts":
/*!****************************************!*\
  !*** ./source/Transpilers/database.ts ***!
  \****************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst transpileDatabase = async (obj, logger, etcd) => {\n    let ret = `CREATE DATABASE IF NOT EXISTS ${obj.spec.name};`;\n    if (obj.spec.characterSet) {\n        const characterSet = etcd.kindIndex.characterset\n            .find((cs) => obj.spec.characterSet === cs.spec.name);\n        if (characterSet) {\n            const mariaDBEquivalent = characterSet.spec.targetEquivalents.mariadb\n                || characterSet.spec.targetEquivalents.mysql;\n            if (mariaDBEquivalent) {\n                ret += `\\r\\nALTER DATABASE ${obj.spec.name} DEFAULT CHARACTER SET = '${mariaDBEquivalent}';`;\n            }\n            else {\n                logger.warn(\"No MariaDB or MySQL equivalent character set for PreQL \"\n                    + `character set '${characterSet.metadata.name}'.`);\n            }\n        }\n        else {\n            logger.error(`Expected CharacterSet '${obj.spec.characterSet}' did not exist! `\n                + \"This is a bug in the PreQL Core library.\");\n        }\n    }\n    if (obj.spec.collation) {\n        const collation = etcd.kindIndex.collation\n            .find((c) => obj.spec.collation === c.spec.name);\n        if (collation) {\n            const mariaDBEquivalent = collation.spec.targetEquivalents.mariadb\n                || collation.spec.targetEquivalents.mysql;\n            if (mariaDBEquivalent) {\n                ret += `\\r\\nALTER DATABASE ${obj.spec.name} DEFAULT COLLATE = '${mariaDBEquivalent}';`;\n            }\n            else {\n                logger.warn(\"No MariaDB or MySQL equivalent collation for PreQL \"\n                    + `collation '${collation.metadata.name}'.`);\n            }\n        }\n        else {\n            logger.error(`Expected Collation '${obj.spec.characterSet}' did not exist! `\n                + \"This is a bug in the PreQL Core library.\");\n        }\n    }\n    return ret;\n};\nexports.default = transpileDatabase;\n\n\n//# sourceURL=webpack://preqlmariadb/./source/Transpilers/database.ts?")},"./source/Transpilers/entry.ts":
/*!*************************************!*\
  !*** ./source/Transpilers/entry.ts ***!
  \*************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nconst transpileEntry = async (obj) => (`INSERT INTO ${obj.spec.databaseName}.${obj.spec.structName}\\r\\n`\n    + "SET\\r\\n\\t"\n    + `id = ${obj.spec.id},\\r\\n\\t`\n    + Object.entries(obj.spec.values)\n        .map((kv) => {\n        const key = kv[0];\n        const value = kv[1];\n        switch (typeof key) {\n            case "boolean": return `${key} = ${value ? "TRUE" : "FALSE"}`;\n            case "number": return `${key} = ${value}`;\n            case "string": return `${key} = \'${value}\'`;\n            default: throw new Error(`Invalid data type for entry field \'${key}\'.`);\n        }\n    })\n        .join(",\\r\\n\\t")\n    + "\\r\\nON DUPLICATE KEY UPDATE\\r\\n\\t"\n    + Object.entries(obj.spec.values)\n        .map((kv) => {\n        const key = kv[0];\n        const value = kv[1];\n        switch (typeof key) {\n            case "boolean": return `${key} = ${value ? "TRUE" : "FALSE"}`;\n            case "number": return `${key} = ${value}`;\n            case "string": return `${key} = \'${value}\'`;\n            default: throw new Error(`Invalid data type for entry field \'${key}\'.`);\n        }\n    })\n        .join(",\\r\\n\\t")\n    + ";\\r\\n");\nexports.default = transpileEntry;\n\n\n//# sourceURL=webpack://preqlmariadb/./source/Transpilers/entry.ts?')},"./source/Transpilers/foreignkey.ts":
/*!******************************************!*\
  !*** ./source/Transpilers/foreignkey.ts ***!
  \******************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nconst escape_1 = __importDefault(__webpack_require__(/*! ../escape */ "./source/escape.ts"));\nconst transpileForeignKeyConstraint = async (obj) => {\n    const storedProcedureName = `${obj.spec.databaseName}.create_fk_${obj.spec.name}`;\n    const foreignKeyName = `fk_${obj.spec.childStructName}_${obj.spec.parentStructName}`;\n    const comment = obj.metadata.labels.comment ? escape_1.default(obj.metadata.labels.comment) : "";\n    return `ALTER TABLE ${obj.spec.databaseName}.${obj.spec.childStructName}\\r\\n`\n        + `ADD COLUMN IF NOT EXISTS ${obj.spec.name} `\n        + `BIGINT UNSIGNED ${obj.spec.nullable ? "NULL" : "NOT NULL"}`\n        + `${comment.length ? "\\r\\nCOMMENT \'" + comment + "\'" : ""};\\r\\n`\n        + `DROP PROCEDURE IF EXISTS ${storedProcedureName};\\r\\n`\n        + "DELIMITER $$\\r\\n"\n        + `CREATE PROCEDURE ${storedProcedureName} ()\\r\\n`\n        + "BEGIN\\r\\n"\n        + "\\tDECLARE EXIT HANDLER FOR 1005 DO 0;\\r\\n"\n        + `\\tALTER TABLE ${obj.spec.databaseName}.${obj.spec.childStructName}\\r\\n`\n        + `\\tADD CONSTRAINT ${foreignKeyName} FOREIGN KEY\\r\\n`\n        + `\\tIF NOT EXISTS ${foreignKeyName}_index (${obj.spec.name})\\r\\n`\n        + `\\tREFERENCES ${obj.spec.parentStructName} (id)\\r\\n`\n        + `\\tON DELETE ${obj.spec.onDeleteAction.toUpperCase() || "RESTRICT"}\\r\\n`\n        + `\\tON UPDATE ${obj.spec.onUpdateAction.toUpperCase() || "RESTRICT"};\\r\\n`\n        + "END $$\\r\\n"\n        + "DELIMITER ;\\r\\n"\n        + `CALL ${storedProcedureName};\\r\\n`\n        + `DROP PROCEDURE IF EXISTS ${storedProcedureName};`;\n};\nexports.default = transpileForeignKeyConstraint;\n\n\n//# sourceURL=webpack://preqlmariadb/./source/Transpilers/foreignkey.ts?')},"./source/Transpilers/plainindex.ts":
/*!******************************************!*\
  !*** ./source/Transpilers/plainindex.ts ***!
  \******************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nconst transpilePlainIndex = async (obj) => {\n    const columnString = obj.spec.keyAttributes\n        .map((key) => `${key.name} ${(key.ascending ? "ASC" : "DESC")}`)\n        .join(", ");\n    return (`ALTER TABLE ${obj.spec.databaseName}.${obj.spec.structName}\\r\\n`\n        + `ADD INDEX IF NOT EXISTS ${obj.spec.name}\\r\\n`\n        + `PRIMARY KEY (${columnString});`);\n};\nexports.default = transpilePlainIndex;\n\n\n//# sourceURL=webpack://preqlmariadb/./source/Transpilers/plainindex.ts?')},"./source/Transpilers/postamble.ts":
/*!*****************************************!*\
  !*** ./source/Transpilers/postamble.ts ***!
  \*****************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nconst commentOut_1 = __importDefault(__webpack_require__(/*! ../commentOut */ "./source/commentOut.ts"));\nconst transpilePostamble = async (obj) => commentOut_1.default(obj.spec.uncommentedText);\nexports.default = transpilePostamble;\n\n\n//# sourceURL=webpack://preqlmariadb/./source/Transpilers/postamble.ts?')},"./source/Transpilers/preamble.ts":
/*!****************************************!*\
  !*** ./source/Transpilers/preamble.ts ***!
  \****************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nconst commentOut_1 = __importDefault(__webpack_require__(/*! ../commentOut */ "./source/commentOut.ts"));\nconst transpilePreamble = async (obj) => commentOut_1.default(obj.spec.uncommentedText);\nexports.default = transpilePreamble;\n\n\n//# sourceURL=webpack://preqlmariadb/./source/Transpilers/preamble.ts?')},"./source/Transpilers/server.ts":
/*!**************************************!*\
  !*** ./source/Transpilers/server.ts ***!
  \**************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tz_offset_1 = __webpack_require__(/*! tz-offset */ \"./node_modules/tz-offset/src/tz-offset.js\");\nconst transpileServer = async (obj, logger, etcd) => {\n    let ret = `DELIMITER $$\\r\\nIF @@hostname = '${obj.spec.hostname}' OR @@logical_server_name = '${obj.spec.name}' THEN\\r\\n\\tDO 0;\\r\\n`;\n    if (obj.spec.timezone) {\n        const offsetInMinutes = tz_offset_1.offsetOf(obj.spec.timezone);\n        const offsetHourString = Math.floor(Math.abs(offsetInMinutes) / 60).toString().padStart(2, \"0\");\n        const offsetMinuteString = (Math.abs(offsetInMinutes) % 60).toString().padStart(2, \"0\");\n        const offsetString = `${offsetInMinutes < 0 ? \"-\" : \"\"}${offsetHourString}:${offsetMinuteString}`;\n        ret += `\\tSET @@time_zone = '${offsetString}';\\r\\n`;\n    }\n    if (obj.spec.characterSet) {\n        const characterSet = etcd.kindIndex.characterset\n            .find((cs) => obj.spec.characterSet === cs.spec.name);\n        if (characterSet) {\n            const mariaDBEquivalent = characterSet.spec.targetEquivalents.mariadb\n                || characterSet.spec.targetEquivalents.mysql;\n            if (mariaDBEquivalent) {\n                ret += `\\tSET @@character_set_server = '${mariaDBEquivalent}';\\r\\n`;\n                ret += `\\tSET @@character_set_database = '${mariaDBEquivalent}';\\r\\n`;\n            }\n            else {\n                logger.warn(\"No MariaDB or MySQL equivalent character set for PreQL \"\n                    + `character set '${characterSet.metadata.name}'.`);\n            }\n        }\n        else {\n            logger.error(`Expected CharacterSet '${obj.spec.characterSet}' did not exist! `\n                + \"This is a bug in the PreQL Core library.\");\n        }\n    }\n    if (obj.spec.collation) {\n        const collation = etcd.kindIndex.collation\n            .find((c) => obj.spec.collation === c.spec.name);\n        if (collation) {\n            const mariaDBEquivalent = collation.spec.targetEquivalents.mariadb\n                || collation.spec.targetEquivalents.mysql;\n            if (mariaDBEquivalent) {\n                ret += `\\tSET @@collation_server = '${mariaDBEquivalent}';\\r\\n`;\n                ret += `\\tSET @@collation_database = '${mariaDBEquivalent}';\\r\\n`;\n            }\n            else {\n                logger.warn(\"No MariaDB or MySQL equivalent collation for PreQL \"\n                    + `collation '${collation.metadata.name}'.`);\n            }\n        }\n        else {\n            logger.error(`Expected Collation '${obj.spec.characterSet}' did not exist! `\n                + \"This is a bug in the PreQL Core library.\");\n        }\n    }\n    ret += \"END IF;\\r\\nDELIMITER ;\";\n    return ret;\n};\nexports.default = transpileServer;\n\n\n//# sourceURL=webpack://preqlmariadb/./source/Transpilers/server.ts?")},"./source/Transpilers/spatialindex.ts":
/*!********************************************!*\
  !*** ./source/Transpilers/spatialindex.ts ***!
  \********************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nconst transpileSpatialIndex = async (obj) => {\n    const schemaName = obj.spec.databaseName;\n    const tableName = obj.spec.structName;\n    const indexName = obj.spec.name;\n    const storedProcedureName = `create_index_${indexName}`;\n    const columnString = obj.spec.keyAttributes\n        .map((key) => `${key.name} ${(key.ascending ? "ASC" : "DESC")}`)\n        .join(", ");\n    return (`DROP PROCEDURE IF EXISTS ${storedProcedureName};\\r\\n`\n        + "DELIMITER $$\\r\\n"\n        + `CREATE PROCEDURE ${storedProcedureName} ()\\r\\n`\n        + "BEGIN\\r\\n"\n        + "\\tDECLARE EXIT HANDLER FOR 1061 DO 0;\\r\\n"\n        + `\\tALTER TABLE ${schemaName}.${tableName}\\r\\n`\n        + `\\tADD SPATIAL INDEX (${columnString});\\r\\n`\n        + "END $$\\r\\n"\n        + "DELIMITER ;\\r\\n"\n        + `CALL ${storedProcedureName};\\r\\n`\n        + `DROP PROCEDURE IF EXISTS ${storedProcedureName};`);\n};\nexports.default = transpileSpatialIndex;\n\n\n//# sourceURL=webpack://preqlmariadb/./source/Transpilers/spatialindex.ts?')},"./source/Transpilers/struct.ts":
/*!**************************************!*\
  !*** ./source/Transpilers/struct.ts ***!
  \**************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nconst transpileStruct = async (obj, logger, etcd) => {\n    let ret = `CREATE TABLE IF NOT EXISTS ${obj.spec.databaseName}.${obj.spec.name} `\n        + "(id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY);\\r\\n"\n        + `ALTER TABLE ${obj.spec.databaseName}.${obj.spec.name} `\n        + "ADD COLUMN IF NOT EXISTS id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY;";\n    if (obj.spec.characterSet) {\n        const characterSet = etcd.kindIndex.characterset\n            .find((cs) => obj.spec.characterSet === cs.spec.name);\n        if (characterSet) {\n            const mariaDBEquivalent = characterSet.spec.targetEquivalents.mariadb\n                || characterSet.spec.targetEquivalents.mysql;\n            if (mariaDBEquivalent) {\n                ret += `\\r\\nALTER TABLE ${obj.spec.databaseName}.${obj.spec.name} DEFAULT CHARACTER SET = \'${mariaDBEquivalent}\';`;\n            }\n            else {\n                logger.warn("No MariaDB or MySQL equivalent character set for PreQL "\n                    + `character set \'${characterSet.metadata.name}\'.`);\n            }\n        }\n        else {\n            logger.error(`Expected CharacterSet \'${obj.spec.characterSet}\' did not exist! `\n                + "This is a bug in the PreQL Core library.");\n        }\n    }\n    if (obj.spec.collation) {\n        const collation = etcd.kindIndex.collation\n            .find((c) => obj.spec.collation === c.spec.name);\n        if (collation) {\n            const mariaDBEquivalent = collation.spec.targetEquivalents.mariadb\n                || collation.spec.targetEquivalents.mysql;\n            if (mariaDBEquivalent) {\n                ret += `\\r\\nALTER TABLE ${obj.spec.databaseName}.${obj.spec.name} DEFAULT COLLATE = \'${mariaDBEquivalent}\';`;\n            }\n            else {\n                logger.warn("No MariaDB or MySQL equivalent collation for PreQL "\n                    + `collation \'${collation.metadata.name}\'.`);\n            }\n        }\n        else {\n            logger.error(`Expected Collation \'${obj.spec.characterSet}\' did not exist! `\n                + "This is a bug in the PreQL Core library.");\n        }\n    }\n    return ret;\n};\nexports.default = transpileStruct;\n\n\n//# sourceURL=webpack://preqlmariadb/./source/Transpilers/struct.ts?')},"./source/Transpilers/textindex.ts":
/*!*****************************************!*\
  !*** ./source/Transpilers/textindex.ts ***!
  \*****************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nconst transpileTextIndex = async (obj) => {\n    const schemaName = obj.spec.databaseName;\n    const tableName = obj.spec.structName;\n    const indexName = obj.spec.name;\n    const storedProcedureName = `create_index_${indexName}`;\n    const columnString = obj.spec.keyAttributes\n        .map((key) => `${key.name} ${(key.ascending ? "ASC" : "DESC")}`)\n        .join(", ");\n    return (`DROP PROCEDURE IF EXISTS ${storedProcedureName};\\r\\n`\n        + "DELIMITER $$\\r\\n"\n        + `CREATE PROCEDURE ${storedProcedureName} ()\\r\\n`\n        + "BEGIN\\r\\n"\n        + "\\tDECLARE EXIT HANDLER FOR 1061 DO 0;\\r\\n"\n        + `\\tALTER TABLE ${schemaName}.${tableName}\\r\\n`\n        + `\\tADD FULLTEXT INDEX (${columnString});\\r\\n`\n        + "END $$\\r\\n"\n        + "DELIMITER ;\\r\\n"\n        + `CALL ${storedProcedureName};\\r\\n`\n        + `DROP PROCEDURE IF EXISTS ${storedProcedureName};`);\n};\nexports.default = transpileTextIndex;\n\n\n//# sourceURL=webpack://preqlmariadb/./source/Transpilers/textindex.ts?')},"./source/Transpilers/uniqueindex.ts":
/*!*******************************************!*\
  !*** ./source/Transpilers/uniqueindex.ts ***!
  \*******************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nconst transpileUniqueIndex = async (obj) => {\n    const schemaName = obj.spec.databaseName;\n    const tableName = obj.spec.structName;\n    const indexName = obj.spec.name;\n    const storedProcedureName = `create_index_${indexName}`;\n    const columnString = obj.spec.keyAttributes\n        .map((key) => `${key.name} ${(key.ascending ? "ASC" : "DESC")}`)\n        .join(", ");\n    return (`DROP PROCEDURE IF EXISTS ${storedProcedureName};\\r\\n`\n        + "DELIMITER $$\\r\\n"\n        + `CREATE PROCEDURE ${storedProcedureName} ()\\r\\n`\n        + "BEGIN\\r\\n"\n        + "\\tDECLARE EXIT HANDLER FOR 1061 DO 0;\\r\\n"\n        + `\\tALTER TABLE ${schemaName}.${tableName}\\r\\n`\n        + `\\tADD CONSTRAINT ${indexName} UNIQUE KEY (${columnString});\\r\\n`\n        + "END $$\\r\\n"\n        + "DELIMITER ;\\r\\n"\n        + `CALL ${storedProcedureName};\\r\\n`\n        + `DROP PROCEDURE IF EXISTS ${storedProcedureName};`);\n};\nexports.default = transpileUniqueIndex;\n\n\n//# sourceURL=webpack://preqlmariadb/./source/Transpilers/uniqueindex.ts?')},"./source/commentOut.ts":
/*!******************************!*\
  !*** ./source/commentOut.ts ***!
  \******************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nfunction commentOut(uncommentedText) {\n    return ("-- " + uncommentedText.replace(/--/gu, "\\\\-\\\\-").replace(/\\r?\\n/gu, "\\r\\n-- "));\n}\nexports.default = commentOut;\n\n\n//# sourceURL=webpack://preqlmariadb/./source/commentOut.ts?')},"./source/escape.ts":
/*!**************************!*\
  !*** ./source/escape.ts ***!
  \**************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nfunction escape(str) {\n    return str\n        .replace("\'", "\'\'")\n        .replace("\\\\", "\\\\\\\\");\n}\nexports.default = escape;\n\n\n//# sourceURL=webpack://preqlmariadb/./source/escape.ts?')},"./source/index.ts":
/*!*************************!*\
  !*** ./source/index.ts ***!
  \*************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar commentOut_1 = __webpack_require__(/*! ./commentOut */ "./source/commentOut.ts");\nexports.commentOut = commentOut_1.default;\nvar escape_1 = __webpack_require__(/*! ./escape */ "./source/escape.ts");\nexports.escape = escape_1.default;\nvar ConsoleLogger_1 = __webpack_require__(/*! ./ConsoleLogger */ "./source/ConsoleLogger.ts");\nexports.ConsoleLogger = ConsoleLogger_1.default;\nvar transpile_1 = __webpack_require__(/*! ./Commands/transpile */ "./source/Commands/transpile.ts");\nexports.transpile = transpile_1.default;\n\n\n//# sourceURL=webpack://preqlmariadb/./source/index.ts?')},0:
/*!*******************************!*\
  !*** multi ./source/index.ts ***!
  \*******************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__(/*! ./source/index.ts */"./source/index.ts");\n\n\n//# sourceURL=webpack://preqlmariadb/multi_./source/index.ts?')}});